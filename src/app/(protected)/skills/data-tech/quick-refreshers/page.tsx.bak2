"use client";

import Link from 'next/link';
import { useState, useEffect } from 'react';
import { ChevronLeft, Check } from 'lucide-react';

type Question = {
  id: number;
  text: string;
  blank: string;
  options: {
    id: string;
    text: string;
    correct: boolean;
  }[];
  explanation: string;
};

export default function QuickRefreshersPage() {
  // Track which questions have been answered correctly
  const [answeredQuestions, setAnsweredQuestions] = useState<number[]>([]);
  // Track the furthest question the user has reached
  const [maxQuestionReached, setMaxQuestionReached] = useState<number>(0);
  
  const questions: Question[] = [
    {
      id: 1,
      text: "is an example of an AI capability that learns and adapts from data",
      blank: "___________",
      options: [
        { id: "spam", text: "Email Spam filtering", correct: true },
        { id: "rules", text: "Email Rules", correct: false }
      ],
      explanation: "Email spam filtering uses machine learning to adapt to new patterns."
    },
    {
      id: 2,
      text: "is a technique where AI systems learn from labeled examples",
      blank: "___________",
      options: [
        { id: "supervised", text: "Supervised learning", correct: true },
        { id: "unsupervised", text: "Unsupervised learning", correct: false }
      ],
      explanation: "Supervised learning uses labeled data to train models."
    },
    {
      id: 3,
      text: "is a type of AI model that processes sequences like text",
      blank: "___________",
      options: [
        { id: "transformer", text: "Transformer", correct: true },
        { id: "cnn", text: "Convolutional Neural Network", correct: false }
      ],
      explanation: "Transformers are designed to handle sequential data like text."
    },
    {
      id: 4,
      text: "is a technique where AI finds patterns in unlabeled data",
      blank: "___________",
      options: [
        { id: "unsupervised", text: "Unsupervised learning", correct: true },
        { id: "reinforcement", text: "Reinforcement learning", correct: false }
      ],
      explanation: "Unsupervised learning discovers patterns without labeled examples."
    },
    {
      id: 5,
      text: "is an AI approach where agents learn through trial and error",
      blank: "___________",
      options: [
        { id: "reinforcement", text: "Reinforcement learning", correct: true },
        { id: "transfer", text: "Transfer learning", correct: false }
      ],
      explanation: "Reinforcement learning involves learning optimal actions through rewards and penalties."
    },
    {
      id: 6,
      text: "is a technique that reuses knowledge from one task to another",
      blank: "___________",
      options: [
        { id: "transfer", text: "Transfer learning", correct: true },
        { id: "federated", text: "Federated learning", correct: false }
      ],
      explanation: "Transfer learning applies knowledge from previously learned tasks to new related ones."
    },
    {
      id: 7,
      text: "is a collaborative ML approach that trains across decentralized devices",
      blank: "___________",
      options: [
        { id: "federated", text: "Federated learning", correct: true },
        { id: "ensemble", text: "Ensemble learning", correct: false }
      ],
      explanation: "Federated learning trains models across multiple devices while keeping data local."
    },
    {
      id: 8,
      text: "is a method that combines multiple models to improve performance",
      blank: "___________",
      options: [
        { id: "ensemble", text: "Ensemble learning", correct: true },
        { id: "active", text: "Active learning", correct: false }
      ],
      explanation: "Ensemble learning uses multiple models to obtain better predictive performance."
    },
    {
      id: 9,
      text: "is an approach where the model selects which data it wants to learn from",
      blank: "___________",
      options: [
        { id: "active", text: "Active learning", correct: true },
        { id: "meta", text: "Meta learning", correct: false }
      ],
      explanation: "Active learning selectively queries for the most informative training examples."
    },
    {
      id: 10,
      text: "is the concept of AI systems learning how to learn",
      blank: "___________",
      options: [
        { id: "meta", text: "Meta learning", correct: true },
        { id: "supervised", text: "Supervised learning", correct: false }
      ],
      explanation: "Meta learning involves systems that learn to learn, improving with experience."
    }
  ];

  // State for the quiz
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedOption, setSelectedOption] = useState<string | null>(null);
  const [isChecked, setIsChecked] = useState(false);
  const [isCorrect, setIsCorrect] = useState(false);
  const [progressDots, setProgressDots] = useState<number[]>(Array(10).fill(0).map((_, i) => i + 1));
  const [quizCompleted, setQuizCompleted] = useState(false);
  const [lessonSaved, setLessonSaved] = useState(false);
  
  const currentQuestion = questions[currentQuestionIndex];
  
  // Handle keyboard number selection (1 or 2)
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // Don't allow changing answers for already answered questions
      if (answeredQuestions.includes(currentQuestionIndex)) {
        return;
      }
      
      if (e.key === '1') {
        setSelectedOption(currentQuestion.options[0].id);
        setIsChecked(false);
      } else if (e.key === '2') {
        setSelectedOption(currentQuestion.options[1].id);
        setIsChecked(false);
      } else if (e.key === 'Enter' && selectedOption) {
        handleCheck();
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => {
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, [currentQuestionIndex, selectedOption, answeredQuestions, currentQuestion.options]);

  const handleOptionSelect = (optionId: string) => {
    setSelectedOption(optionId);
    setIsChecked(false);
  };

  const handleCheck = () => {
    if (!selectedOption || answeredQuestions.includes(currentQuestionIndex)) {
      return;
    }

    setIsChecked(true);
    
    const selectedOptionObj = currentQuestion.options.find(opt => opt.id === selectedOption);
    
    if (selectedOptionObj?.correct) {
      setIsCorrect(true);
      
      // Mark this question as answered
      if (!answeredQuestions.includes(currentQuestionIndex)) {
        setAnsweredQuestions([...answeredQuestions, currentQuestionIndex]);
      }
      
      // If this is the last question the user has seen, allow them to proceed to the next one
      if (currentQuestionIndex === maxQuestionReached && currentQuestionIndex < questions.length - 1) {
        setMaxQuestionReached(currentQuestionIndex + 1);
      }
      
      // Check if this is the last question
      if (currentQuestionIndex === questions.length - 1) {
        // Set quiz completed after a short delay to show the correct answer
        setTimeout(() => {
          setQuizCompleted(true);
        }, 1000);
      } else if (currentQuestionIndex < questions.length - 1) {
        // Auto-advance to next question after a short delay
        setTimeout(() => {
          handleNextQuestion();
          setSelectedOption(null);
          setIsChecked(false);
          setIsCorrect(false);
        }, 1500);
      }
    } else {
      setIsCorrect(false);
    }
  };

  const handlePrevQuestion = () => {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex(currentQuestionIndex - 1);
      setSelectedOption(null);
      setIsChecked(false);
      setIsCorrect(false);
      
      // If this question was previously answered, show the answer
      if (answeredQuestions.includes(currentQuestionIndex - 1)) {
        const correctOption = questions[currentQuestionIndex - 1].options.find(opt => opt.correct);
        if (correctOption) {
          setSelectedOption(correctOption.id);
          setIsChecked(true);
          setIsCorrect(true);
        }
      }
    }
  };

  const handleNextQuestion = () => {
    // Allow advancing to the next question if it's either already reached or just answered
    if (currentQuestionIndex <= maxQuestionReached && currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setSelectedOption(null);
      setIsChecked(false);
      setIsCorrect(false);
      
      // If this question was previously answered, show the answer
      if (answeredQuestions.includes(currentQuestionIndex + 1)) {
        const correctOption = questions[currentQuestionIndex + 1].options.find(opt => opt.correct);
        if (correctOption) {
          setSelectedOption(correctOption.id);
          setIsChecked(true);
          setIsCorrect(true);
        }
      }
    }
  };

  // Function to reset the quiz
  const handleRedo = () => {
    setCurrentQuestionIndex(0);
    setSelectedOption(null);
    setIsChecked(false);
    setIsCorrect(false);
    setQuizCompleted(false);
    setLessonSaved(false);
  };

  // Function to save lessons
  const handleSaveLessons = () => {
    setLessonSaved(true);
    // Here you would implement the actual saving functionality
    // For example, saving to local storage or making an API call
    console.log('Lessons saved to Learning Coach page');
  };

  return (
    <div className="min-h-screen bg-gray-50 text-gray-900">
      {/* Header navigation */}
      <div className="max-w-7xl mx-auto pt-6 px-4 sm:px-6 lg:px-8">
        <div className="max-w-4xl mx-auto">
          <Link 
            href="/skills/data-tech"
            className="inline-flex items-center text-primary hover:text-primary/80 mb-6"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5 mr-1"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fillRule="evenodd"
                d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z"
                clipRule="evenodd"
              />
            </svg>
            Back to Data & Tech Capable
          </Link>
          
          {/* Quick Refreshers heading with blue background */}
          <div className="bg-[#2158F4] text-white rounded-lg p-4 sm:p-6 mb-6">
            <h1 className="text-2xl sm:text-3xl font-bold">Quick Refreshers</h1>
            <p className="mt-1">Test your knowledge with bite-sized AI learning exercises</p>
          </div>
        </div>
      </div>

      {/* Main quiz content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-8">
        {quizCompleted ? (
          /* Success screen */
          <div className="max-w-4xl mx-auto bg-[#E5EDFF] rounded-lg shadow-sm mb-8 overflow-hidden p-8">
            <div className="text-center">
              <div className="inline-flex items-center justify-center h-24 w-24 rounded-full bg-[#00C48C] mb-6">
                <Check className="h-12 w-12 text-white" />
              </div>
              <h2 className="text-2xl font-bold text-gray-900 mb-4">Quiz Completed!</h2>
              <p className="text-lg text-gray-700 mb-8">Congratulations! You've successfully completed the Quick Refreshers quiz.</p>
              
              <div className="flex flex-col sm:flex-row items-center justify-center gap-4">
                <button 
                  onClick={handleRedo}
                  className="px-6 py-3 bg-white border border-gray-300 rounded-md text-gray-700 font-medium hover:bg-gray-50 transition-colors w-full sm:w-auto"
                >
                  Redo Quiz
                </button>
                
                <button 
                  onClick={handleSaveLessons}
                  disabled={lessonSaved}
                  className={`px-6 py-3 rounded-md font-medium w-full sm:w-auto transition-colors ${lessonSaved 
                    ? 'bg-[#00C48C] text-white cursor-default' 
                    : 'bg-[#B681FC] text-white hover:bg-[#B681FC]/90'}`}
                >
                  {lessonSaved ? 'Saved to Learning Coach' : 'Save Lessons'}
                </button>
              </div>
            </div>
          </div>
        ) : (
          /* Quiz container */
          <div className="max-w-4xl mx-auto bg-[#E5EDFF] rounded-lg shadow-sm mb-8 overflow-hidden">
          {/* Progress bar */}
          <div className="p-4">
            <div className="w-full flex items-center px-4 pb-4 max-w-4xl mx-auto">
              {/* Left arrow */}
              <button 
                className={`text-primary hover:text-primary/80 transition-colors ${
                  currentQuestionIndex === 0 ? 'opacity-50 cursor-not-allowed' : ''
                }`}
                onClick={handlePrevQuestion}
                disabled={currentQuestionIndex === 0}
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
              </button>
              
              {/* Progress dots */}
              <div className="flex-grow flex justify-center mx-4">
                <div className="flex w-full justify-between">
                  {progressDots.map((_, index) => (
                    <div 
                      key={index} 
                      className={`w-12 h-2 rounded-full ${
                        index <= currentQuestionIndex ? 'bg-[#B681FC]' : 'bg-gray-300'
                      }`}
                    />
                  ))}
                </div>
              </div>
              
              {/* Right arrow */}
              <button 
                className={`text-primary hover:text-primary/80 transition-colors ${
                  currentQuestionIndex >= maxQuestionReached ? 'opacity-50 cursor-not-allowed' : ''
                }`}
                onClick={handleNextQuestion}
                disabled={currentQuestionIndex >= maxQuestionReached}
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                </svg>
              </button>
            </div>
          </div>
          
          <hr className="border-t border-gray-300 mx-6" />
          
          {/* Learning tip */}
          <div className="px-6 py-4">
            <p className="text-base text-gray-600">
              <span className="text-primary font-medium">AI learns and adapts from data</span>, like spam filters detecting evolving patterns.
              In contrast, email rules are static, moving messages based on fixed keywords
              without learning or adapting.
            </p>
          </div>

          <hr className="border-t border-gray-300 mx-6" />
          
          {/* Question */}
          <div className="px-6 py-6 flex items-center">
            <p className="text-lg text-gray-800">
              <span className="bg-[#B681FC] text-white px-3 py-1 rounded font-medium">
                {selectedOption 
                  ? currentQuestion.options.find(option => option.id === selectedOption)?.text
                  : '_______'}
              </span> is a technique where AI systems learn from labeled examples
            </p>
          </div>
        </div>
        
        {/* Options and Check button moved outside the blue background */}
        <div className="max-w-4xl mx-auto mt-4">
          <div className="flex items-center gap-3 px-6">
            {currentQuestion.options.map((option, index) => (
              <div 
                key={option.id}
                className={`border rounded-lg p-3 flex items-center cursor-pointer transition-all flex-1 ${
                  selectedOption === option.id && isChecked && option.correct ? 'bg-[#00C48C] border-[#00C48C]/70 text-white font-bold' : 
                  selectedOption === option.id && isChecked && !option.correct ? 'bg-[#FF5A5F] border-[#FF5A5F]/70 text-white font-bold' :
                  selectedOption === option.id ? 'bg-[#4F8BFF] border-[#4F8BFF]/70 text-white' : 
                  'border-gray-300 hover:border-[#2158F4] hover:shadow-sm'
                }`}
                onClick={() => {
                  // Don't allow changing answers for already answered questions
                  if (!answeredQuestions.includes(currentQuestionIndex)) {
                    handleOptionSelect(option.id);
                  }
                }}
                onKeyDown={(e) => {
                  if (e.key === `${index + 1}`) {
                    handleOptionSelect(option.id);
                  }
                }}
              >
                <span className={`${selectedOption === option.id ? 'bg-white text-[#4F8BFF]' : 'bg-[#B681FC] text-white'} px-2 py-1 rounded-full mr-3 font-medium transition-colors`}>{index + 1}</span>
                <span className="font-medium text-sm">{option.text}</span>
              </div>
            ))}
          
            {/* Check button */}
            <button
              onClick={handleCheck}
              disabled={!selectedOption || answeredQuestions.includes(currentQuestionIndex)}
              className={`bg-[#B681FC] text-white px-5 py-3 rounded-md font-medium transition-colors flex-none ${
                !selectedOption || answeredQuestions.includes(currentQuestionIndex) ? 'opacity-50 cursor-not-allowed' : 'hover:bg-[#B681FC]/90 shadow-sm'
              }`}
              style={{ width: '100px' }}
            >
              Check
            </button>
          </div>
        </div>
        )}
      </div>
    </div>
  );
}
